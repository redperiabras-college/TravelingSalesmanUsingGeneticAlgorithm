%*************************************************************************%
%@BeginVerbatim 
% Title: Traveling Salesman Problem
% Description: The typical traveling salesman problem with the
%              implementation of genetic algorithm
% Filename: RunTS.m
% Version: v00.02
% Author: Group 1
% Yr&Sec: 3-4
% Subject: Computational Intelligence
%@EndVerbatim 
%*************************************************************************%

% Last Reviewed by: Periabras, 17 February 2017

%@Intialization***********************************************************%

population = [];
evaluation = 0;
evaluation_history = [];
generation = 0;
best_fitness = 0;
worst_fitness = 0;
 
%*************************************************************************%

%@Code Body***************************************************************%

%Console input of initial population
init_population = input('Initial Population: '); 

%Initialization of population
%@Module: Initialize(int);
%@Parameter:
%   init_population, int
%@Returns:
%   population, init_population x 10 matrix
population = Initialize(init_population); 

%Evaluation of initialized population
%@Module: Evaluation(matrix);
%@Parameter: 
%   population, matrix
%@Returns:
%   evaluation, float, evaluation for the whole population
%   best_chromosome, 10 x 1 matrix, chromosome with highest fitness
%   worst_chromosome, 10 x 1 matrix, chromosome with lowest fitness
[evaluation, best_chromosome, worst_chromosome] = Evaluate(population);

%Compute for the Fitness score of the best chromosome
%@Module: Fitness(matrix);
%@Parameter:
%   chromosome, 10 x 1 matrix
%@Returns:
%   fitness_score, int
best_fitness = Fitness(best_chromosome);

%Loop until satisfaction criteria is not reached
while best_fitness ~= worst_fitness
    
    %Select two chromosomes for reproduction
    %@Module: Selection(matrix);
    %@Parameter: 
    %   population, matrix, current generation's population
    %@Returns:
    %   parent_1, 10 x 1 matrix, first chromosome for reproduction
    %   parent_2, 10 x 1 matrix, second chromosome for reproduction
    [parent_1, parent_2] = Selection(population);
    fprintf('Selection:\n');
    fprintf('\t\tParent 1:\t%d %d %d %d %d %d %d %d %d %d\n', parent_1);
    fprintf('\t\tParent 2:\t%d %d %d %d %d %d %d %d %d %d\n', parent_2);
    
    %Recombination: Order 1 Crossover, considering permutation
    %@Module: Crossover(matrix, matrix);
    %@Parameter: 
    %   parent_1, 10 x 1 matrix, first chromosome for reproduction
    %   parent_2, 10 x 1 matrix, second chromosome for reproduction
    %@Returns:
    %   child, 10 x 1 matrix, offspring of the two chromosome
    child = Crossover(parent_1, parent_2);
    fprintf('Crossover:\n');
    fprintf('\t\tChild:\t\t%d %d %d %d %d %d %d %d %d %d\n', child);
    
    %Offspring Modification, causes movement in the search space
    %@Module: Mutation(matrix);
    %@Parameter: 
    %   child, 10 x 1 matrix, offspring of the two chromosome
    %@Returns:
    %   child, 10 x 1 matrix, modified offspring
    child = Mutation(child);
    fprintf('Mutation:\n');
    fprintf('\t\tChild:\t\t%d %d %d %d %d %d %d %d %d %d\n', child);
    
    %Steady-state GA Deletion, choose which member of the population will
    %    be discarded
    %@Module: Deletion(matrix, matrix);
    %@Parameter: 
    %   population, init_population x 10 matrix, whole population of the
    %       current generation
    %   child, 10 x 1 matrix, current candidate to get into the population
    %@Returns:
    %   population, init_population x 10 matrix, the new generation
    %   rejected, 10 x 1 matrix, rejected chromosome
    [population, rejected] = Deletion(population, child);
    fprintf('\nRejected:\t\t\t%d %d %d %d %d %d %d %d %d %d\n\n', rejected);
    
    %Increment the generation
    generation = generation + 1;
    
    %Re-evaluate the new generation
    %@Module: Evaluation(matrix);
    %@Parameter: 
    %   population, matrix
    %@Returns:
    %   evaluation, float, evaluation for the whole population
    %   best_chromosome, 10 x 1 matrix, chromosome with highest fitness
    %   worst_chromosome, 10 x 1 matrix, chromosome with lowest fitness
    [evaluation, best_chromosome, worst_chromosome] = Evaluate(population);
    
    %Compute for the fitness of the best and worst chromosomes
    %@Module: Fitness(matrix);
    %@Parameter:
    %   chromosome, 10 x 1 matrix
    %@Returns:
    %   fitness_score, int
    best_fitness = Fitness(best_chromosome);
    worst_fitness = Fitness(worst_chromosome);
    
    %Console Log the current generation status
    fprintf('Generation:\t\t\t%d\n', generation);
    fprintf('Evaluation:\t\t\t%f\n', evaluation);
    fprintf('Best Chromosome:\t%d %d %d %d %d %d %d %d %d %d\n', best_chromosome);
    fprintf('Best Fitness:\t\t%f\n', best_fitness);
    fprintf('Worst Chromosome:\t%d %d %d %d %d %d %d %d %d %d\n', worst_chromosome);
    fprintf('Worst Fitness:\t\t%f\n', worst_fitness);
    average = (best_fitness + worst_fitness) / 2;
    
    %Concatenate and record the best_fitness, worst_fitness, and average scores for overview of the performance
    evaluation_history = vertcat(evaluation_history, [best_fitness worst_fitness average]);
end

%Generate the Final Output
hold on;
subplot(211); %Select row 1, column 1 of a 2x1 subplot

%Plot the optimal route for the traveling salesman problem
%@Module: DisplayResult(matrix);
%@Parameter: 
%   chromosome, matrix
DisplayResult(best_chromosome);

%Select row 2, column 1 of a 2x1 subplot
subplot(212);

%Graph the overall performance of the genetic algorithm in finding the optimal route
%@Module: GraphEvaluation(matrix);
%@Parameter: 
%   evaluation_history, matrix
GraphEvaluation(evaluation_history);

hold off;

%*************************************************************************%